=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\.gitignore ===
# Ø§Ù„ØªØ¨Ø¹ÙŠØ§Øª
node_modules/

# Ù…Ù„ÙØ§Øª Ø§Ù„Ø¨ÙŠØ¦Ø©
.env
env/

# Ø§Ù„Ø³Ø¬Ù„Ø§Øª ÙˆØ§Ù„Ù…Ø®Ø±Ø¬Ø§Øª
*.log
logs/

# Ù…Ù„ÙØ§Øª Ø§Ù„Ù†Ø¸Ø§Ù…
.DS_Store

# Ù…Ø¬Ù„Ø¯Ø§Øª Ø§Ù„Ø¨Ù†Ø§Ø¡
dist/
build/
out/
.coverage
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\package.json ===
{
  "name": "weather-app",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "i18next": "^23.16.8",
    "papaparse": "^5.5.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-i18next": "^11.18.6",
    "react-scripts": "^5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\README.md ===
# AI-weather-prediction
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\public\index.html ===
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>AI Weather Prediction</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\App.css ===
/* Ø®Ù„ÙÙŠØ© Ø§Ù„ØµÙØ­Ø© Ø¨Ø§Ù„ÙƒØ§Ù…Ù„ */
.app-container {
  min-height: 100vh;
  background-image: url("C:\\Users\\Yasser Dhia (NDC)\\Desktop\\background-night.jpg"); /* Ø¹Ø¯Ù„ Ø§Ù„Ø±Ø§Ø¨Ø· */
  background-size: cover;
  background-position: center;
  padding: 2rem;
  color: #fff;
  font-family: sans-serif;
  position: relative;
}

/* Ø²Ø± Ø§Ù„Ù„ØºØ© (Ø£ÙŠÙ‚ÙˆÙ†Ø©) */
.lang-switch {
  position: absolute;
  top: 20px;
  right: 20px;
}

/* Ø£ÙŠÙ‚ÙˆÙ†Ø© ØªØ¯Ù„ Ø¹Ù„Ù‰ Ø§Ù„ØªØ±Ø¬Ù…Ø© */
.language-button {
  background: linear-gradient(90deg, #4b6cb7, #182848);
  color: #fff;
  border: none;
  padding: 0.6rem 0.8rem;
  cursor: pointer;
  border-radius: 10px;
  font-weight: 600;
  transition: background 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.language-button:hover {
  background: linear-gradient(90deg, #182848, #4b6cb7);
}

.language-button .material-icons {
  font-size: 24px; 
}

/* Ø§Ù„Ø­Ø§ÙˆÙŠØ© Ø§Ù„Ø±Ø¦ÙŠØ³ÙŠØ© Ù„Ø¹Ø±Ø¶ Ø§Ù„Ù€ select ÙŠÙ…ÙŠÙ†/ÙŠØ³Ø§Ø± */
.layout-container {
  width: 100%;
  margin-top: 80px; /* Ø¥Ø²Ø§Ø­Ø© Ù„Ù„Ø£Ø³ÙÙ„ Ù„ÙŠØ¸Ù‡Ø± Ø£Ø³ÙÙ„ Ø²Ø± Ø§Ù„Ù„ØºØ© */
  display: flex;
}

.layout-container.ltr {
  justify-content: flex-start; /* ÙÙŠ Ø§Ù„Ù„ØºØ© Ø§Ù„Ø¥Ù†Ø¬Ù„ÙŠØ²ÙŠØ© */
}

.layout-container.rtl {
  justify-content: flex-end; /* ÙÙŠ Ø§Ù„Ù„ØºØ© Ø§Ù„Ø¹Ø±Ø¨ÙŠØ© */
}

/* Ù…Ø¸Ù‡Ø± Ø¹Ø§Ù… Ù„Ù„Ù‚ÙˆØ§Ø¦Ù… Ø§Ù„Ù…Ù†Ø³Ø¯Ù„Ø© */
.select-container {
  width: 250px;
  padding: 1rem;
  background: rgba(0, 0, 0, 0.5);
  border-radius: 8px;
  margin: 0 2rem;
  text-align: left;
}

.select-container label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: bold;
}

.select-container select {
  width: 100%;
  margin-bottom: 1rem;
  padding: 0.4rem;
  border-radius: 4px;
  border: 1px solid #ccc;
}

/* Ø²Ø± Ø§Ù„Ø¹ÙˆØ¯Ø© */
.back-button {
  background: #444;
  color: #fff;
  border: none;
  margin-bottom: 1rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
  border-radius: 4px;
}
.back-button:hover {
  background: #666;
}

/* Ø­Ø§ÙˆÙŠØ© Ø§Ù„Ø¨Ø·Ø§Ù‚Ø§Øª */
.weather-cards-container {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 1rem;
  background: rgba(0, 0, 0, 0.5);
  border-radius: 8px;
  text-align: center;
}

/* Ù…Ø¬Ù…ÙˆØ¹Ø© Ø§Ù„Ø¨Ø·Ø§Ù‚Ø§Øª */
.cards-wrapper {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  justify-content: center;
}

/* Ø¨Ø·Ø§Ù‚Ø© Ø§Ù„ØªÙˆÙ‚Ø¹Ø§Øª Ù„ÙƒÙ„ ÙŠÙˆÙ… */
.forecast-card {
  background: rgba(0, 0, 0, 0.7);
  border-radius: 8px;
  width: 220px;
  padding: 1rem;
  text-align: left;
  position: relative;
  animation: fadeIn 0.6s ease-in-out forwards;
}

.forecast-card h3 {
  margin-top: 0;
  color: #ffd700; /* Ù„ÙˆÙ† Ù…Ù…ÙŠØ² Ù„Ù„ØªØ§Ø±ÙŠØ® */
}

.forecast-card p {
  margin: 0.3rem 0;
}

/* Ù…Ø¤Ø«Ø±Ø§Øª Ø§Ù†ØªÙ‚Ø§Ù„ (Fade-In) */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\App.js ===
// src/App.js
import React, { useEffect, useState } from 'react';
import Papa from 'papaparse';
import CountryCitySelect from './components/CountryCitySelect';
import WeatherDisplay from './components/WeatherDisplay';
import { useTranslation } from 'react-i18next';
import './App.css';

function App() {
  const [csvData, setCsvData] = useState([]);
  const [countries, setCountries] = useState([]);
  const [cities, setCities] = useState([]);
  
  // Ø³ÙŠØªÙ… ØªØ®Ø²ÙŠÙ† ÙƒÙ„ Ø§Ù„ØµÙÙˆÙ Ø§Ù„ØªØ§Ø¨Ø¹Ø© Ù„Ù„Ù…Ø­Ø§ÙØ¸Ø© Ø§Ù„Ù…Ø®ØªØ§Ø±Ø© ÙÙŠ Ù‡Ø°Ø§ Ø§Ù„Ù…ØªØºÙŠÙ‘Ø±
  const [selectedRows, setSelectedRows] = useState([]);

  const [selectedCountry, setSelectedCountry] = useState('');
  const [selectedCity, setSelectedCity] = useState('');

  const { i18n } = useTranslation();

  // Ø¹Ù†Ø¯ ØªØ­Ù…ÙŠÙ„ Ø§Ù„ØªØ·Ø¨ÙŠÙ‚ Ù†Ø¬Ù„Ø¨ Ù…Ù„Ù CSV Ù…Ù† ÙÙˆÙ„Ø¯Ø± public
  useEffect(() => {
    Papa.parse('/future_weather_predictions.csv', {
      download: true,
      header: true,
      complete: (results) => {
        const data = results.data;
        setCsvData(data);

        // Ø§Ø³ØªØ®Ù„Ø§Øµ Ù‚Ø§Ø¦Ù…Ø© Ø§Ù„Ø¯ÙˆÙ„
        const uniqueCountries = [...new Set(data.map((row) => row.country))];
        setCountries(uniqueCountries.sort());
      },
      error: (err) => {
        console.error('Error parsing CSV:', err);
      },
    });
  }, []);

  // Ø¹Ù†Ø¯ ØªØºÙŠÙŠØ± Ø§Ù„Ø¯ÙˆÙ„Ø©ØŒ Ù†ÙØ¸Ù‡Ø± Ø§Ù„Ù…Ø¯Ù†/Ø§Ù„Ù…Ø­Ø§ÙØ¸Ø§Øª Ø§Ù„Ø®Ø§ØµØ© Ø¨Ù‡Ø§
  const handleCountryChange = (e) => {
    const selected = e.target.value;
    setSelectedCountry(selected);
    setSelectedCity('');
    setSelectedRows([]); // Ø¥Ø¹Ø§Ø¯Ø© Ø§Ù„ØªÙ‡ÙŠØ¦Ø©

    if (selected) {
      // Ø¬Ù„Ø¨ ÙƒÙ„ Ø§Ù„Ù…Ø¯Ù†/Ø§Ù„Ù…Ø­Ø§ÙØ¸Ø§Øª Ø§Ù„Ù…Ø±ØªØ¨Ø·Ø© Ø¨Ù‡Ø°Ù‡ Ø§Ù„Ø¯ÙˆÙ„Ø©
      const filtered = csvData.filter((row) => row.country === selected);
      const uniqueCities = [...new Set(filtered.map((row) => row.governorate || row.city))];
      setCities(uniqueCities.sort());
    } else {
      setCities([]);
    }
  };

  // Ø¹Ù†Ø¯ Ø§Ø®ØªÙŠØ§Ø± Ù…Ø¯ÙŠÙ†Ø©/Ù…Ø­Ø§ÙØ¸Ø©
  const handleCityChange = (e) => {
    const selected = e.target.value;
    setSelectedCity(selected);

    if (selected) {
      // Ù†Ø¬Ù„Ø¨ Ø¬Ù…ÙŠØ¹ Ø§Ù„Ø³Ø¬Ù„Ø§Øª Ø§Ù„Ø®Ø§ØµØ© Ø¨Ù‡Ø°Ù‡ Ø§Ù„Ù…Ø¯ÙŠÙ†Ø© (Ø£Ùˆ Ø§Ù„Ù…Ø­Ø§ÙØ¸Ø©)
      const filteredRows = csvData.filter(
        (r) =>
          r.country === selectedCountry &&
          (r.governorate === selected || r.city === selected)
      );
      setSelectedRows(filteredRows);
    } else {
      setSelectedRows([]);
    }
  };

  // Ø²Ø± Ø§Ù„Ø±Ø¬ÙˆØ¹ Ø¥Ù„Ù‰ Ø§Ø®ØªÙŠØ§Ø± Ø§Ù„Ø¯ÙˆÙ„Ø©/Ø§Ù„Ù…Ø­Ø§ÙØ¸Ø©
  const handleBack = () => {
    setSelectedRows([]);
    setSelectedCountry('');
    setSelectedCity('');
  };

  // ØªØ¨Ø¯ÙŠÙ„ Ø§Ù„Ù„ØºØ©
  const toggleLanguage = () => {
    i18n.changeLanguage(i18n.language === 'en' ? 'ar' : 'en');
  };

  return (
    <div className="app-container">
      {/* Ø²Ø± Ø§Ù„Ù„ØºØ© (Ø£ÙŠÙ‚ÙˆÙ†Ø©) */}
      <div className="lang-switch">
        <button className="language-button" onClick={toggleLanguage}>
          {/* ÙŠÙ…ÙƒÙ†Ùƒ ÙˆØ¶Ø¹ Ø£ÙŠÙ‚ÙˆÙ†Ø© Font Awesome Ù…Ø«Ù„Ø§Ù‹ Ø£Ùˆ Ø£ÙŠÙ‚ÙˆÙ†Ø© SVG ØªØ¹Ø¨Ù‘Ø± Ø¹Ù† Ø§Ù„Ù…Ø´Ø±ÙˆØ¹ */}
          <span className="material-icons">
            translate
          </span>
        </button>
      </div>

      {/* Ø­Ø§ÙˆÙŠØ© Ù„Ø¹Ø±Ø¶ Ø¹Ù†Ø§ØµØ± Ø§Ù„Ø§Ø®ØªÙŠØ§Ø± Ø¥Ù…Ø§ ÙÙŠ Ø§Ù„ÙŠØ³Ø§Ø± Ø£Ùˆ Ø§Ù„ÙŠÙ…ÙŠÙ† Ø­Ø³Ø¨ Ø§Ù„Ù„ØºØ© */}
      <div className={`layout-container ${i18n.language === 'ar' ? 'rtl' : 'ltr'}`}>
        <CountryCitySelect
          countries={countries}
          selectedCountry={selectedCountry}
          onCountryChange={handleCountryChange}
          cities={cities}
          selectedCity={selectedCity}
          onCityChange={handleCityChange}
        />
      </div>

      {/* Ø¥Ø°Ø§ ÙƒØ§Ù† Ù„Ø¯ÙŠÙ†Ø§ ØµÙÙˆÙ Ù…Ø®ØªØ§Ø±Ø© (Ù…Ø¯ÙŠÙ†Ø© Ù…Ø®ØªØ§Ø±Ø©) Ù†Ø¹Ø±Ø¶ Ø§Ù„Ø·Ù‚Ø³ */}
      {selectedRows.length > 0 && (
        <WeatherDisplay
          selectedRows={selectedRows}
          selectedCountry={selectedCountry}
          selectedCity={selectedCity}
          onBack={handleBack}
        />
      )}
    </div>
  );
}

export default App;
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\i18n.js ===
// src/i18n.js
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

// Ø§Ø³ØªÙŠØ±Ø§Ø¯ Ù…Ù„ÙØ§Øª Ø§Ù„ØªØ±Ø¬Ù…Ø©
import translationEN from './locales/en/translation.json';
import translationAR from './locales/ar/translation.json';

const resources = {
  en: {
    translation: translationEN,
  },
  ar: {
    translation: translationAR,
  },
};

i18n
  .use(initReactI18next)
  .init({
    resources,
    lng: 'en',             // Ø§Ù„Ù„ØºØ© Ø§Ù„Ø§ÙØªØ±Ø§Ø¶ÙŠØ©
    fallbackLng: 'en',     // ÙÙŠ Ø­Ø§Ù„ Ø¹Ø¯Ù… ØªÙˆÙØ± ØªØ±Ø¬Ù…Ø© 
    interpolation: {
      escapeValue: false,  // react Ù…ÙˆØ¬ÙˆØ¯Ø© Ø¨Ø§Ù„ÙØ¹Ù„
    },
  });

export default i18n;
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\index.js ===
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './App.css';
import App from './App';
import './i18n'; // ØªÙ‡ÙŠØ¦Ø© Ø§Ù„ØªØ±Ø¬Ù…Ø©

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\components\CountryCitySelect.js ===
// src/components/CountryCitySelect.js
import React from 'react';
import { useTranslation } from 'react-i18next';

const CountryCitySelect = ({
  countries,
  selectedCountry,
  onCountryChange,
  cities,
  selectedCity,
  onCityChange
}) => {
  const { t } = useTranslation();

  return (
    <div className="select-container">
      {/* Ø§Ø®ØªÙŠØ§Ø± Ø§Ù„Ø¯ÙˆÙ„Ø© */}
      <label htmlFor="country-select">{t('selectCountry')}: </label>
      <select
        id="country-select"
        value={selectedCountry}
        onChange={onCountryChange}
      >
        <option value="">{t('selectCountry')}</option>
        {countries.map((country, index) => (
          <option key={index} value={country}>
            {/* Ø§Ø³ØªØ®Ø¯Ø§Ù… Ø§Ù„ØªØ±Ø¬Ù…Ø© Ø¨Ù†Ø§Ø¡Ù‹ Ø¹Ù„Ù‰ Ù…ÙØªØ§Ø­ countries ÙÙŠ translation.json */}
            {t(`countries.${country}`, country)}
          </option>
        ))}
      </select>

      {/* Ø§Ø®ØªÙŠØ§Ø± Ø§Ù„Ù…Ø¯ÙŠÙ†Ø©/Ø§Ù„Ù…Ø­Ø§ÙØ¸Ø© */}
      {selectedCountry && (
        <>
          <label htmlFor="city-select">{t('selectCity')}: </label>
          <select id="city-select" value={selectedCity} onChange={onCityChange}>
            <option value="">{t('selectCity')}</option>
            {cities.map((city, index) => (
              <option key={index} value={city}>
                {/* Ø§Ø³ØªØ®Ø¯Ø§Ù… Ø§Ù„ØªØ±Ø¬Ù…Ø© Ø¨Ù†Ø§Ø¡Ù‹ Ø¹Ù„Ù‰ Ù…ÙØªØ§Ø­ cities ÙÙŠ translation.json */}
                {t(`cities.${city}`, city)}
              </option>
            ))}
          </select>
        </>
      )}
    </div>
  );
};

export default CountryCitySelect;
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\components\WeatherDisplay.js ===
// src/components/WeatherDisplay.js
import React from 'react';
import { useTranslation } from 'react-i18next';

const WeatherDisplay = ({ selectedRows, selectedCountry, selectedCity, onBack }) => {
  const { t, i18n } = useTranslation();

  if (!selectedRows || selectedRows.length === 0) return null;

  // Ø§Ù„ÙŠÙˆÙ… (Ø§Ù„ÙˆÙ‚Øª Ø§Ù„Ø­Ø§Ù„ÙŠ)
  const today = new Date();
  // Ù†Ø±ÙŠØ¯ Ø¹Ø±Ø¶ Ø§Ù„Ø£ÙŠØ§Ù… Ø§Ù„ØªÙŠ ØªÙƒÙˆÙ† >= Ø§Ù„ØºØ¯
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  // ØªØµÙÙŠØ© Ø§Ù„Ø³Ø¬Ù„Ø§Øª Ø¨Ø­ÙŠØ« ØªÙƒÙˆÙ† ØªÙˆØ§Ø±ÙŠØ®Ù‡Ø§ Ù…Ø³ØªÙ‚Ø¨Ù„ÙŠØ© (Ø£ÙƒØ¨Ø± Ø£Ùˆ ÙŠØ³Ø§ÙˆÙŠ tomorrow)
  const futureData = selectedRows.filter((row) => {
    const rowDate = new Date(row.date);
    return rowDate >= tomorrow;
  });

  // ØªØ±ØªÙŠØ¨ Ø§Ù„Ø³Ø¬Ù„Ø§Øª ØªØµØ§Ø¹Ø¯ÙŠØ§Ù‹ Ø­Ø³Ø¨ Ø§Ù„ØªØ§Ø±ÙŠØ®
  futureData.sort((a, b) => new Date(a.date) - new Date(b.date));

  // Ø¥Ø°Ø§ Ù„Ù… ÙŠÙˆØ¬Ø¯ Ø£ÙŠ Ø£ÙŠØ§Ù… Ù…Ø³ØªÙ‚Ø¨Ù„ÙŠØ©ØŒ ÙŠÙ…ÙƒÙ† Ø¹Ø±Ø¶ Ø±Ø³Ø§Ù„Ø© Ø£Ùˆ Ø´ÙŠØ¡
  if (futureData.length === 0) {
    return (
      <div className="weather-cards-container">
        <button onClick={onBack} className="back-button">
          {t('backToSelect')}
        </button>
        <h2>
          {t(`cities.${selectedCity}`, selectedCity)} - {t(`countries.${selectedCountry}`, selectedCountry)}
        </h2>
        <p>{t('noFutureData') || 'No Future Data Available.'}</p>
      </div>
    );
  }

  return (
    <div className="weather-cards-container">
      <button onClick={onBack} className="back-button">
        {t('backToSelect')}
      </button>

      <h2>
        {t(`cities.${selectedCity}`, selectedCity)} - {t(`countries.${selectedCountry}`, selectedCountry)}
      </h2>

      <div className="cards-wrapper">
        {futureData.map((row, index) => {
          return (
            <div className="forecast-card" key={index}>
              <h3>{t('date')}: {row.date}</h3>
              <p>{t('season')}: {row.season}</p>
              <p>{t('maxTemp')}: {Number(row.maxtemp_c).toFixed(2)}</p>
              <p>{t('minTemp')}: {Number(row.mintemp_c).toFixed(2)}</p>
              <p>{t('avgTemp')}: {(
                (Number(row.maxtemp_c) + Number(row.mintemp_c)) / 2
              ).toFixed(2)}</p>
              <p>{t('predictedTemp')}: {Number(row['Predicted Avg Temp']).toFixed(2)}</p>
              <p>{t('rangeTemp')}: {Number(row.temp_range).toFixed(2)}</p>
              <p>{t('humidity')}: {Number(row.avghumidity).toFixed(2)}</p>
              <p>{t('wind')}: {Number(row.maxwind_mph).toFixed(2)}</p>
              <p>{t('precip')}: {Number(row.totalprecip_mm).toFixed(2)}</p>
              <p>{t('visibility')}: {Number(row.avgvis_km).toFixed(2)}</p>
              <p>{t('uvIndex')}: {Number(row.uv_index).toFixed(2)}</p>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default WeatherDisplay;
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\locales\ar\translation.json ===
{
  "selectCountry": "Ø§Ø®ØªØ± Ø¯ÙˆÙ„Ø©",
  "selectCity": "Ø§Ø®ØªØ± Ù…Ø¯ÙŠÙ†Ø©",
  "maxTemp": "Ø¯Ø±Ø¬Ø© Ø§Ù„Ø­Ø±Ø§Ø±Ø© Ø§Ù„Ø¹Ø¸Ù…Ù‰ (Â°C)",
  "minTemp": "Ø¯Ø±Ø¬Ø© Ø§Ù„Ø­Ø±Ø§Ø±Ø© Ø§Ù„ØµØºØ±Ù‰ (Â°C)",
  "avgTemp": "Ù…ØªÙˆØ³Ø· Ø§Ù„Ø­Ø±Ø§Ø±Ø© (Â°C)",
  "humidity": "Ø§Ù„Ø±Ø·ÙˆØ¨Ø©",
  "wind": "Ø§Ù„Ø±ÙŠØ§Ø­ (Ù…ÙŠÙ„/Ø³Ø§Ø¹Ø©)",
  "precip": "Ù‡Ø·ÙˆÙ„ Ø§Ù„Ø£Ù…Ø·Ø§Ø± (Ù…Ù„Ù…)",
  "visibility": "Ø§Ù„Ø±Ø¤ÙŠØ© (ÙƒÙ…)",
  "uvIndex": "Ù…Ø¤Ø´Ø± Ø§Ù„Ø£Ø´Ø¹Ø© ÙÙˆÙ‚ Ø§Ù„Ø¨Ù†ÙØ³Ø¬ÙŠØ©",
  "season": "Ø§Ù„Ù…ÙˆØ³Ù…",
  "date": "Ø§Ù„ØªØ§Ø±ÙŠØ®",
  "predictedTemp": "Ù…ØªÙˆØ³Ø· Ø§Ù„Ø­Ø±Ø§Ø±Ø© Ø§Ù„Ù…ØªÙˆÙ‚Ø¹Ø©",
  "rangeTemp": "Ø§Ù„Ù…Ø¯Ù‰ Ø§Ù„Ø­Ø±Ø§Ø±ÙŠ",
  "backToSelect": "Ø¹ÙˆØ¯Ø© Ù„Ù„Ø§Ø®ØªÙŠØ§Ø±",
  "languageSwitch": "English",
  "countries": {
    "Iraq": "Ø§Ù„Ø¹Ø±Ø§Ù‚",
    "Saudi Arabia": "Ø§Ù„Ø³Ø¹ÙˆØ¯ÙŠØ©",
    "Kuwait": "Ø§Ù„ÙƒÙˆÙŠØª",
    "Jordan": "Ø§Ù„Ø£Ø±Ø¯Ù†",
    "Syria": "Ø³ÙˆØ±ÙŠØ§",
    "Turkey": "ØªØ±ÙƒÙŠØ§",
    "Iran": "Ø¥ÙŠØ±Ø§Ù†",
    "Egypt": "Ù…ØµØ±",
    "Lebanon": "Ù„Ø¨Ù†Ø§Ù†",
    "UAE": "Ø§Ù„Ø¥Ù…Ø§Ø±Ø§Øª",
    "Qatar": "Ù‚Ø·Ø±",
    "Oman": "Ø¹ÙÙ…Ø§Ù†",
    "Yemen": "Ø§Ù„ÙŠÙ…Ù†",
    "Armenia": "Ø£Ø±Ù…ÙŠÙ†ÙŠØ§",
    "Azerbaijan": "Ø£Ø°Ø±Ø¨ÙŠØ¬Ø§Ù†",
    "Georgia": "Ø¬ÙˆØ±Ø¬ÙŠØ§",
    "Afghanistan": "Ø£ÙØºØ§Ù†Ø³ØªØ§Ù†",
    "Pakistan": "Ø¨Ø§ÙƒØ³ØªØ§Ù†",
    "India": "Ø§Ù„Ù‡Ù†Ø¯",
    "Turkmenistan": "ØªØ±ÙƒÙ…Ø§Ù†Ø³ØªØ§Ù†",
    "Uzbekistan": "Ø£ÙˆØ²Ø¨ÙƒØ³ØªØ§Ù†",
    "Kazakhstan": "ÙƒØ§Ø²Ø§Ø®Ø³ØªØ§Ù†"
  },
  "cities": {
    "Baghdad": "Ø¨ØºØ¯Ø§Ø¯",
    "Basra": "Ø§Ù„Ø¨ØµØ±Ø©",
    "Nineveh": "Ù†ÙŠÙ†ÙˆÙ‰",
    "Diyala": "Ø¯ÙŠØ§Ù„Ù‰",
    "Salah al-Din": "ØµÙ„Ø§Ø­ Ø§Ù„Ø¯ÙŠÙ†",
    "Kirkuk": "ÙƒØ±ÙƒÙˆÙƒ",
    "Anbar": "Ø§Ù„Ø£Ù†Ø¨Ø§Ø±",
    "Erbil": "Ø£Ø±Ø¨ÙŠÙ„",
    "Sulaymaniyah": "Ø§Ù„Ø³Ù„ÙŠÙ…Ø§Ù†ÙŠØ©",
    "Dohuk": "Ø¯Ù‡ÙˆÙƒ",
    "Maysan": "Ù…ÙŠØ³Ø§Ù†",
    "Dhi Qar": "Ø°ÙŠ Ù‚Ø§Ø±",
    "Wasit": "ÙˆØ§Ø³Ø·",
    "Babil": "Ø¨Ø§Ø¨Ù„",
    "Karbala": "ÙƒØ±Ø¨Ù„Ø§Ø¡",
    "Najaf": "Ø§Ù„Ù†Ø¬Ù",
    "Qadisiyah": "Ø§Ù„Ù‚Ø§Ø¯Ø³ÙŠØ©",
    "Muthanna": "Ø§Ù„Ù…Ø«Ù†Ù‰",
    "noFutureData": "No future data available"
  }
  
}
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\locales\en\translation.json ===
{
  "selectCountry": "Select a Country",
  "selectCity": "Select a City",
  "maxTemp": "Max Temp (Â°C)",
  "minTemp": "Min Temp (Â°C)",
  "avgTemp": "Avg Temp (Â°C)",
  "humidity": "Humidity",
  "wind": "Wind (mph)",
  "precip": "Precipitation (mm)",
  "visibility": "Visibility (km)",
  "uvIndex": "UV Index",
  "season": "Season",
  "date": "Date",
  "predictedTemp": "Predicted Avg Temp",
  "rangeTemp": "Temperature Range",
  "backToSelect": "Back to Selection",
  "languageSwitch": "Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©",
  "countries": {
    "Iraq": "Iraq",
    "Saudi Arabia": "Saudi Arabia",
    "Kuwait": "Kuwait",
    "Jordan": "Jordan",
    "Syria": "Syria",
    "Turkey": "Turkey",
    "Iran": "Iran",
    "Egypt": "Egypt",
    "Lebanon": "Lebanon",
    "UAE": "United Arab Emirates",
    "Qatar": "Qatar",
    "Oman": "Oman",
    "Yemen": "Yemen",
    "Armenia": "Armenia",
    "Azerbaijan": "Azerbaijan",
    "Georgia": "Georgia",
    "Afghanistan": "Afghanistan",
    "Pakistan": "Pakistan",
    "India": "India",
    "Turkmenistan": "Turkmenistan",
    "Uzbekistan": "Uzbekistan",
    "Kazakhstan": "Kazakhstan"
  },
  "cities": {
    "Baghdad": "Baghdad",
    "Basra": "Basra",
    "Nineveh": "Nineveh",
    "Diyala": "Diyala",
    "Salah al-Din": "Salah al-Din",
    "Kirkuk": "Kirkuk",
    "Anbar": "Anbar",
    "Erbil": "Erbil",
    "Sulaymaniyah": "Sulaymaniyah",
    "Dohuk": "Dohuk",
    "Maysan": "Maysan",
    "Dhi Qar": "Dhi Qar",
    "Wasit": "Wasit",
    "Babil": "Babil",
    "Karbala": "Karbala",
    "Najaf": "Najaf",
    "Qadisiyah": "Qadisiyah",
    "Muthanna": "Muthanna",
    "noFutureData": "No future data available"
    
  }
}
