=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\.gitignore ===
# Ø§Ù„ØªØ¨Ø¹ÙŠØ§Øª
node_modules/

# Ù…Ù„ÙØ§Øª Ø§Ù„Ø¨ÙŠØ¦Ø©
.env
env/

# Ø§Ù„Ø³Ø¬Ù„Ø§Øª ÙˆØ§Ù„Ù…Ø®Ø±Ø¬Ø§Øª
*.log
logs/

# Ù…Ù„ÙØ§Øª Ø§Ù„Ù†Ø¸Ø§Ù…
.DS_Store

# Ù…Ø¬Ù„Ø¯Ø§Øª Ø§Ù„Ø¨Ù†Ø§Ø¡
dist/
build/
out/
.coverage
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\package.json ===
{
  "name": "weather-app",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "i18next": "^23.16.8",
    "lottie-web": "^5.12.2",
    "papaparse": "^5.5.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-i18next": "^11.18.6",
    "react-icons": "^5.4.0",
    "react-lottie-player": "^2.1.0",
    "react-scripts": "^5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ],
    "dependencies": {
  "react-icons": "^4.10.1",
  "react-lottie-player": "^1.5.2",
  "lottie-web": "^5.12.0"
}

  }
  
}
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\README.md ===
# AI-weather-prediction
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\public\index.html ===
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>AI Weather Prediction</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\App.css ===
/* App.css */
/* Ø¥Ø¹Ø§Ø¯Ø© Ø¶Ø¨Ø· Ø¨Ø¹Ø¶ Ø§Ù„Ù‚ÙŠÙ… Ø§Ù„Ø§ÙØªØ±Ø§Ø¶ÙŠØ© */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Ø§Ø³ØªØ®Ø¯Ø§Ù… Ø®Ø· Ù„Ø·ÙŠÙ (Ù…Ø«Ø§Ù„: Open Sans) */
@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap');

body {
  font-family: 'Open Sans', sans-serif;
  background-color: #f0f2f5;
  color: #333;
}

/* Ø´Ø±ÙŠØ· Ø¹Ù„ÙˆÙŠ (Navbar) */
.navbar {
  background: linear-gradient(45deg, #0066cc, #003366);
  padding: 0.5rem 1rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  color: #fff;
}

.navbar .logo {
  font-size: 1.5rem;
  font-weight: 600;
}

.navbar .lang-switch {
  position: static;
}

.navbar .language-button {
  background: transparent;
  color: #fff;
  border: 1px solid #fff;
  padding: 0.4rem 0.8rem;
  border-radius: 25px;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}
.navbar .language-button:hover {
  background: #fff;
  color: #003366;
}

/* Ø§Ù„Ø¨Ø§Ù†Ø± (Hero Section) - ØµÙˆØ±Ø© Ø®Ù„ÙÙŠØ© */
.hero-section {
  position: relative;
  height: 400px;
  background: url("https://images.unsplash.com/photo-1535905667929-044dbbe3c2fc?auto=format&fit=crop&w=1600&q=80") center/cover no-repeat;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
}

.hero-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 30, 60, 0.5);
}

.hero-content {
  position: relative;
  z-index: 2;
  text-align: center;
}

.hero-content h1 {
  font-size: 2.5rem;
  margin-bottom: 1rem;
  text-shadow: 2px 2px 8px rgba(0,0,0,0.7);
}

.hero-content p {
  font-size: 1.1rem;
  margin-bottom: 1rem;
  text-shadow: 1px 1px 6px rgba(0,0,0,0.5);
}

/* Ø­Ø§ÙˆÙŠØ© Ø¹Ø§Ù…Ø© Ù„Ù„ØµÙØ­Ø© */
.container {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* ØªÙ†Ø³ÙŠÙ‚ Ø¹Ø§Ù… Ù„Ù€ select-container */
.select-container {
  background: #fff;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  margin-top: -3rem; /* Ø±ÙØ¹ Ø§Ù„Ø­Ø§ÙˆÙŠØ© Ù‚Ù„ÙŠÙ„Ø§Ù‹ Ø¥Ù„Ù‰ ÙÙˆÙ‚ */
  position: relative;
  z-index: 10;
}

.select-container label {
  display: block;
  margin-bottom: 0.25rem;
  font-weight: 600;
}

.select-container select {
  width: 100%;
  padding: 0.5rem;
  margin-bottom: 1rem;
  outline: none;
  border: 1px solid #ccc;
  border-radius: 4px;
}

/* Ø²Ø± Ø§Ù„Ø¹ÙˆØ¯Ø© */
.back-button {
  background-color: #d9534f;
  color: #fff;
  border: none;
  margin-bottom: 1rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.back-button:hover {
  background-color: #c9302c;
}

/* Ø­Ø§ÙˆÙŠØ© Ø¹Ø±Ø¶ Ø§Ù„Ø·Ù‚Ø³ */
.weather-cards-container {
  margin: 2rem 0;
  background: #fff;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* Ø¹Ù†Ø§ÙˆÙŠÙ† Ø¯Ø§Ø®Ù„ Ø­Ø§ÙˆÙŠØ© Ø§Ù„Ø·Ù‚Ø³ */
.weather-cards-container h2 {
  margin-bottom: 1rem;
  text-align: center;
  font-weight: 600;
  font-size: 1.3rem;
}

/* Ù…Ø¬Ù…ÙˆØ¹Ø© Ø§Ù„Ø¨Ø·Ø§Ù‚Ø§Øª */
.cards-wrapper {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 1rem;
}

/* Ø§Ù„Ø¨Ø·Ø§Ù‚Ø© Ù†ÙØ³Ù‡Ø§ */
.forecast-card {
  background: #fafafa;
  border-radius: 8px;
  padding: 1rem;
  text-align: left;
  position: relative;
  box-shadow: 0 1px 5px rgba(0,0,0,0.1);
  transition: transform 0.3s ease;
}
.forecast-card:hover {
  transform: translateY(-5px);
}

.forecast-card h3 {
  margin-top: 0;
  margin-bottom: 0.5rem;
  color: #0066cc;
  font-weight: 600;
}
.forecast-card p {
  margin: 0.25rem 0;
  font-size: 0.95rem;
}

/* ØªÙ†Ø³ÙŠÙ‚ RTL Ø¹Ù†Ø¯ Ø§Ø®ØªÙŠØ§Ø± Ø§Ù„Ø¹Ø±Ø¨ÙŠØ© */
.rtl {
  direction: rtl;
}

.rtl .navbar {
  justify-content: flex-start;
}
.rtl .navbar .logo {
  margin-right: auto;
  margin-left: 1rem;
}
.rtl .navbar .lang-switch {
  margin-right: 1rem;
}

/* ÙÙˆØªØ± Ø§Ø®ØªÙŠØ§Ø±ÙŠ */
.footer {
  background: #003366;
  color: #fff;
  text-align: center;
  padding: 0.7rem 1rem;
  margin-top: 2rem;
  font-size: 0.9rem;
}
/* ÙÙŠ Ø£Ø¹Ù„Ù‰ App.css Ø£Ùˆ Ø¢Ø®Ø±Ù‡ */

/* Ø·Ø¨Ù‚Ø© ØªÙØ¹Ø±Ø¶ ÙÙˆÙ‚ Ø§Ù„Ù…Ø­ØªÙˆÙ‰ Ø¬Ø²Ø¦ÙŠØ§Ù‹ */
.weather-effect-overlay {
  position: fixed; /* Ø­ØªÙ‰ ØªØ¸Ù‡Ø± ÙÙˆÙ‚ ÙƒÙ„ Ø´ÙŠØ¡ */
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none; /* Ø­ØªÙ‰ Ù„Ø§ ØªØ¹ÙŠÙ‚ Ø§Ù„Ù†Ù‚Ø±Ø§Øª Ø¹Ù„Ù‰ Ø§Ù„Ù…Ø­ØªÙˆÙ‰ */
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999; /* Ø¹Ø§Ù„ÙŠ ÙƒÙŠ ÙŠØ¸Ù‡Ø± ÙÙˆÙ‚ */
  /* Ø®Ù„ÙÙŠØ© Ø´Ø¨Ù‡ Ø´ÙØ§ÙØ© Ø£Ùˆ Ø¨Ø¯ÙˆÙ† Ø®Ù„ÙÙŠØ© */
  background-color: rgba(0, 0, 0, 0.01);
}
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\App.js ===
// App.js
import React, { useEffect, useState } from 'react';
import Papa from 'papaparse';
import CountryCitySelect from './components/CountryCitySelect';
import WeatherDisplay from './components/WeatherDisplay';
import { useTranslation } from 'react-i18next';

// Ù…ÙƒØªØ¨Ø© Ø§Ù„Ø£ÙŠÙ‚ÙˆÙ†Ø§Øª
import { FaGlobe } from 'react-icons/fa';

import './App.css';

function App() {
  const [csvData, setCsvData] = useState([]);
  const [countries, setCountries] = useState([]);
  const [cities, setCities] = useState([]);
  const [selectedRows, setSelectedRows] = useState([]);
  const [selectedCountry, setSelectedCountry] = useState('');
  const [selectedCity, setSelectedCity] = useState('');
  const { i18n, t } = useTranslation();

  // Ø¹Ù†Ø¯ ØªØ­Ù…ÙŠÙ„ Ø§Ù„ØªØ·Ø¨ÙŠÙ‚ Ù†Ø¬Ù„Ø¨ Ù…Ù„Ù CSV Ù…Ù† ÙÙˆÙ„Ø¯Ø± public
  useEffect(() => {
    Papa.parse('/future_weather_predictions.csv', {
      download: true,
      header: true,
      complete: (results) => {
        const data = results.data;
        setCsvData(data);

        // Ø§Ø³ØªØ®Ø±Ø§Ø¬ Ù‚Ø§Ø¦Ù…Ø© Ø§Ù„Ø¯ÙˆÙ„
        const uniqueCountries = [...new Set(data.map((row) => row.country))];
        setCountries(uniqueCountries.sort());
      },
      error: (err) => {
        console.error('Error parsing CSV:', err);
      },
    });
  }, []);

  // ØªØºÙŠÙŠØ± Ø§Ù„Ø¯ÙˆÙ„Ø©
  const handleCountryChange = (e) => {
    const selected = e.target.value;
    setSelectedCountry(selected);
    setSelectedCity('');
    setSelectedRows([]);

    if (selected) {
      const filtered = csvData.filter((row) => row.country === selected);
      const uniqueCities = [
        ...new Set(filtered.map((row) => row.governorate || row.city)),
      ];
      setCities(uniqueCities.sort());
    } else {
      setCities([]);
    }
  };

  // Ø§Ø®ØªÙŠØ§Ø± Ø§Ù„Ù…Ø¯ÙŠÙ†Ø©
  const handleCityChange = (e) => {
    const selected = e.target.value;
    setSelectedCity(selected);

    if (selected) {
      const filteredRows = csvData.filter(
        (r) =>
          r.country === selectedCountry &&
          (r.governorate === selected || r.city === selected)
      );
      setSelectedRows(filteredRows);
    } else {
      setSelectedRows([]);
    }
  };

  // Ø²Ø± Ø§Ù„Ø±Ø¬ÙˆØ¹ Ù„Ù„Ø§Ø®ØªÙŠØ§Ø±
  const handleBack = () => {
    setSelectedRows([]);
    setSelectedCountry('');
    setSelectedCity('');
  };

  // ØªØ¨Ø¯ÙŠÙ„ Ø§Ù„Ù„ØºØ©
  const toggleLanguage = () => {
    i18n.changeLanguage(i18n.language === 'en' ? 'ar' : 'en');
  };

  return (
    <div className={i18n.language === 'ar' ? 'rtl' : ''}>
      {/* Ø´Ø±ÙŠØ· Ø¹Ù„ÙˆÙŠ (Navbar) */}
      <nav className="navbar">
        <div className="logo">AI Weather</div>
        <div className="lang-switch">
          <button className="language-button" onClick={toggleLanguage}>
            {/* Ø£ÙŠÙ‚ÙˆÙ†Ø© Ù…Ù† react-icons */}
            <FaGlobe style={{ marginRight: '4px' }} />
            {/* ÙŠÙ…ÙƒÙ† ÙƒØªØ§Ø¨Ø© Ø£ÙŠ Ù†Øµ Ø£Ùˆ Ø¬Ø¹Ù„Ù‡ Ù…Ø¬Ø±Ø¯ Ø£ÙŠÙ‚ÙˆÙ†Ø© */}
          </button>
        </div>
      </nav>

      {/* Ù‚Ø³Ù… Ø¨Ø§Ù†Ø± (Hero Section) */}
      <section className="hero-section">
        <div className="hero-overlay"></div>
        <div className="hero-content">
          <h1>{t('appTitle') || 'AI Weather Prediction'}</h1>
          <p>{t('appSubtitle') || 'Accurate future weather predictions powered by AI'}</p>
        </div>
      </section>

      {/* Ø­Ø§ÙˆÙŠØ© Ø¹Ø§Ù…Ø© ØªØ­ØªÙˆÙ‰ ØµÙ†Ø¯ÙˆÙ‚ Ø§Ø®ØªÙŠØ§Ø± Ø§Ù„Ø¯ÙˆÙ„Ø©/Ø§Ù„Ù…Ø¯ÙŠÙ†Ø© */}
      <div className="container">
        {/* Ù…ÙƒÙˆÙ† Ø§Ù„Ø§Ø®ØªÙŠØ§Ø± */}
        {selectedRows.length === 0 && (
          <CountryCitySelect
            countries={countries}
            selectedCountry={selectedCountry}
            onCountryChange={handleCountryChange}
            cities={cities}
            selectedCity={selectedCity}
            onCityChange={handleCityChange}
          />
        )}

        {/* Ø¥Ø°Ø§ ØªÙ… Ø§Ø®ØªÙŠØ§Ø± ØµÙÙˆÙ Ù…Ø¹ÙŠÙ†Ø© Ù†Ø¹Ø±Ø¶ Ø§Ù„Ø·Ù‚Ø³ */}
        {selectedRows.length > 0 && (
          <WeatherDisplay
            selectedRows={selectedRows}
            selectedCountry={selectedCountry}
            selectedCity={selectedCity}
            onBack={handleBack}
          />
        )}
      </div>

      {/* ÙÙˆØªØ± Ø§Ø®ØªÙŠØ§Ø±ÙŠ */}
      <footer className="footer">
        &copy; 2025 AI Weather. All rights reserved.
      </footer>
    </div>
  );
}

export default App;
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\i18n.js ===
// src/i18n.js
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

// Ø§Ø³ØªÙŠØ±Ø§Ø¯ Ù…Ù„ÙØ§Øª Ø§Ù„ØªØ±Ø¬Ù…Ø©
import translationEN from './locales/en/translation.json';
import translationAR from './locales/ar/translation.json';

const resources = {
  en: {
    translation: translationEN,
  },
  ar: {
    translation: translationAR,
  },
};

i18n
  .use(initReactI18next)
  .init({
    resources,
    lng: 'en',             // Ø§Ù„Ù„ØºØ© Ø§Ù„Ø§ÙØªØ±Ø§Ø¶ÙŠØ©
    fallbackLng: 'en',     // ÙÙŠ Ø­Ø§Ù„ Ø¹Ø¯Ù… ØªÙˆÙØ± ØªØ±Ø¬Ù…Ø© 
    interpolation: {
      escapeValue: false,  // react Ù…ÙˆØ¬ÙˆØ¯Ø© Ø¨Ø§Ù„ÙØ¹Ù„
    },
  });

export default i18n;
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\index.js ===
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './App.css';
import App from './App';
import './i18n'; // ØªÙ‡ÙŠØ¦Ø© Ø§Ù„ØªØ±Ø¬Ù…Ø©

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\components\CountryCitySelect.js ===
// CountryCitySelect.js
import React from 'react';
import { useTranslation } from 'react-i18next';

const CountryCitySelect = ({
  countries,
  selectedCountry,
  onCountryChange,
  cities,
  selectedCity,
  onCityChange
}) => {
  const { t } = useTranslation();

  return (
    <div className="select-container">
      <label htmlFor="country-select">{t('selectCountry')}:</label>
      <select
        id="country-select"
        value={selectedCountry}
        onChange={onCountryChange}
      >
        <option value="">{t('selectCountry')}</option>
        {countries.map((country, index) => (
          <option key={index} value={country}>
            {t(`countries.${country}`, country)}
          </option>
        ))}
      </select>

      {selectedCountry && (
        <>
          <label htmlFor="city-select">{t('selectCity')}:</label>
          <select id="city-select" value={selectedCity} onChange={onCityChange}>
            <option value="">{t('selectCity')}</option>
            {cities.map((city, index) => (
              <option key={index} value={city}>
                {t(`cities.${city}`, city)}
              </option>
            ))}
          </select>
        </>
      )}
    </div>
  );
};

export default CountryCitySelect;
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\components\WeatherDisplay.js ===
// WeatherDisplay.js
import React, { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import Lottie from 'react-lottie-player';

// Ø§Ø³ØªÙŠØ±Ø§Ø¯ Ø£Ù†ÙŠÙ…ÙŠØ´Ù† Ø§Ù„Ù…Ø·Ø±
import rainAnimation from '../lotties/rain.json'; // ØªØ£ÙƒØ¯ÙŠ Ù…Ù† ÙˆØ¬ÙˆØ¯ Ù‡Ø°Ø§ Ø§Ù„Ù…Ù„Ù

const WeatherDisplay = ({ selectedRows, selectedCountry, selectedCity, onBack }) => {
  const { t } = useTranslation();
  const [showRainEffect, setShowRainEffect] = useState(false);

  if (!selectedRows || selectedRows.length === 0) return null;

  // Ø§Ù„ÙŠÙˆÙ… (Ø§Ù„ÙˆÙ‚Øª Ø§Ù„Ø­Ø§Ù„ÙŠ)
  const today = new Date();
  // Ù†Ø¹Ø±Ø¶ Ø§Ù„Ø£ÙŠØ§Ù… Ø§Ù„ØªÙŠ ØªØ§Ø±ÙŠØ®Ù‡Ø§ >= Ø§Ù„ØºØ¯
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  // ØªØµÙÙŠØ© Ø§Ù„Ø³Ø¬Ù„Ø§Øª Ø¨Ø­ÙŠØ« ØªÙƒÙˆÙ† ØªÙˆØ§Ø±ÙŠØ®Ù‡Ø§ Ù…Ø³ØªÙ‚Ø¨Ù„ÙŠØ©
  const futureData = selectedRows.filter((row) => {
    const rowDate = new Date(row.date);
    return rowDate >= tomorrow;
  });

  // ØªØ±ØªÙŠØ¨ Ø§Ù„Ø³Ø¬Ù„Ø§Øª ØªØµØ§Ø¹Ø¯ÙŠÙ‹Ù‘Ø§
  futureData.sort((a, b) => new Date(a.date) - new Date(b.date));

  // Ø¥Ø°Ø§ Ù„Ù… ØªÙˆØ¬Ø¯ Ø¨ÙŠØ§Ù†Ø§Øª Ù…Ø³ØªÙ‚Ø¨Ù„ÙŠØ©
  if (futureData.length === 0) {
    return (
      <div className="weather-cards-container">
        <button onClick={onBack} className="back-button">
          {t('backToSelect')}
        </button>
        <h2>
          {t(`cities.${selectedCity}`, selectedCity)} - {t(`countries.${selectedCountry}`, selectedCountry)}
        </h2>
        <p>{t('noFutureData') || 'No future data available'}</p>
      </div>
    );
  }

  // Ø§Ù„ØªØ­Ù‚Ù‚ Ù…Ù† ÙˆØ¬ÙˆØ¯ Ø­Ø§Ù„Ø© Ø¬ÙˆÙŠØ© ØªØ´ÙŠØ± Ù„Ù„Ù…Ø·Ø± ÙÙŠ Ø§Ù„Ø¨ÙŠØ§Ù†Ø§Øª Ø§Ù„Ù…Ø³ØªÙ‚Ø¨Ù„ÙŠØ©
  useEffect(() => {
    // Ù„Ùˆ ÙˆØ¬Ø¯Ù†Ø§ Ø£ÙŠ row Ø­Ø§Ù„ØªÙ‡ ØªØ­ØªÙˆÙŠ ÙƒÙ„Ù…Ø© Rain (ÙŠÙ…ÙƒÙ† ØªØ­Ø³ÙŠÙ†Ù‡Ø§ Ø¨Ø­ÙŠØ« ØªÙƒÙˆÙ† Ø£ÙƒØ«Ø± Ø¯Ù‚Ø©)
    const rainy = futureData.some((row) => {
      const cond = (row.condition_text || '').toLowerCase();
      return cond.includes('rain'); // or cond.includes('drizzle')...
    });
    setShowRainEffect(rainy);
  }, [futureData]);

  return (
    <div className="weather-cards-container">
      {/* Ø¥Ø°Ø§ Ø£Ø±Ø¯ØªÙ Ø£Ù† ØªØ¸Ù‡Ø± Ù…Ø¤Ø«Ø± Ø§Ù„Ù…Ø·Ø± Ø¹Ù„Ù‰ ÙƒÙ„ Ø§Ù„Ø´Ø§Ø´Ø©ØŒ Ù…Ù…ÙƒÙ† ÙˆØ¶Ø¹ Ø§Ù„Ø¹Ù†ØµØ± Ø®Ø§Ø±Ø¬Ù‹Ø§ */}
      {showRainEffect && (
        <div className="weather-effect-overlay">
          <Lottie
            loop
            animationData={rainAnimation}
            play
            style={{ width: 200, height: 200 }}
          />
        </div>
      )}

      <button onClick={onBack} className="back-button">
        {t('backToSelect')}
      </button>

      <h2>
        {t(`cities.${selectedCity}`, selectedCity)} - {t(`countries.${selectedCountry}`, selectedCountry)}
      </h2>

      <div className="cards-wrapper">
        {futureData.map((row, index) => {
          // Ø­Ø³Ø§Ø¨ Ù…ØªÙˆØ³Ø· Ø§Ù„Ø­Ø±Ø§Ø±Ø© ÙŠØ¯ÙˆÙŠØ§Ù‹
          const avgTempCalc = ((Number(row.maxtemp_c) + Number(row.mintemp_c)) / 2).toFixed(2);

          // ØªØ£ÙƒØ¯ÙŠ Ù…Ù† Ø£Ù† Ø§Ø³Ù… Ø§Ù„Ø¹Ù…ÙˆØ¯ ÙÙŠ CSV Ù‡Ùˆ "Predicted Avg Temp" Ø£Ùˆ "predicted_avgtemp_c"
          // Ù‡Ù†Ø§ Ø§Ø³ØªØ¹Ù…Ù„Ù†Ø§ Ù†ÙØ³ Ø§Ù„Ø§Ø³Ù… Ø§Ù„Ø¸Ø§Ù‡Ø± ÙÙŠ Ø³Ø¤Ø§Ù„Ùƒ:
          const predicted = Number(row['Predicted Avg Temp'] || row['predicted_avgtemp_c'] || 0).toFixed(2);

          return (
            <div className="forecast-card" key={index}>
              <h3>{t('date')}: {row.date}</h3>
              <p>{t('season')}: {row.season}</p>
              <p>{t('maxTemp')}: {Number(row.maxtemp_c).toFixed(2)}</p>
              <p>{t('minTemp')}: {Number(row.mintemp_c).toFixed(2)}</p>
              <p>{t('avgTemp')}: {avgTempCalc}</p>
              <p>{t('predictedTemp')}: {predicted}</p>
              <p>{t('rangeTemp')}: {Number(row.temp_range).toFixed(2)}</p>
              <p>{t('humidity')}: {Number(row.avghumidity).toFixed(2)}</p>
              <p>{t('wind')}: {Number(row.maxwind_mph).toFixed(2)}</p>
              <p>{t('precip')}: {Number(row.totalprecip_mm).toFixed(2)}</p>
              <p>{t('visibility')}: {Number(row.avgvis_km).toFixed(2)}</p>
              {/* Ø¥Ø°Ø§ ÙƒØ§Ù† Ù„Ø¯ÙŠÙƒÙ Ø­Ù‚Ù„ uv_index ÙŠÙ…ÙƒÙ† Ø¹Ø±Ø¶Ù‡ Ø£ÙŠØ¶Ø§Ù‹ */}
              <p>{t('uvIndex')}: {Number(row.uv_index || 0).toFixed(2)}</p>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default WeatherDisplay;
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\locales\ar\translation.json ===
{
  "selectCountry": "Ø§Ø®ØªØ± Ø¯ÙˆÙ„Ø©",
  "selectCity": "Ø§Ø®ØªØ± Ù…Ø¯ÙŠÙ†Ø©",
  "maxTemp": "Ø¯Ø±Ø¬Ø© Ø§Ù„Ø­Ø±Ø§Ø±Ø© Ø§Ù„Ø¹Ø¸Ù…Ù‰ (Â°C)",
  "minTemp": "Ø¯Ø±Ø¬Ø© Ø§Ù„Ø­Ø±Ø§Ø±Ø© Ø§Ù„ØµØºØ±Ù‰ (Â°C)",
  "avgTemp": "Ù…ØªÙˆØ³Ø· Ø§Ù„Ø­Ø±Ø§Ø±Ø© (Â°C)",
  "humidity": "Ø§Ù„Ø±Ø·ÙˆØ¨Ø©",
  "wind": "Ø§Ù„Ø±ÙŠØ§Ø­ (Ù…ÙŠÙ„/Ø³Ø§Ø¹Ø©)",
  "precip": "Ù‡Ø·ÙˆÙ„ Ø§Ù„Ø£Ù…Ø·Ø§Ø± (Ù…Ù„Ù…)",
  "visibility": "Ø§Ù„Ø±Ø¤ÙŠØ© (ÙƒÙ…)",
  "uvIndex": "Ù…Ø¤Ø´Ø± Ø§Ù„Ø£Ø´Ø¹Ø© ÙÙˆÙ‚ Ø§Ù„Ø¨Ù†ÙØ³Ø¬ÙŠØ©",
  "season": "Ø§Ù„Ù…ÙˆØ³Ù…",
  "date": "Ø§Ù„ØªØ§Ø±ÙŠØ®",
  "predictedTemp": "Ù…ØªÙˆØ³Ø· Ø§Ù„Ø­Ø±Ø§Ø±Ø© Ø§Ù„Ù…ØªÙˆÙ‚Ø¹Ø©",
  "rangeTemp": "Ø§Ù„Ù…Ø¯Ù‰ Ø§Ù„Ø­Ø±Ø§Ø±ÙŠ",
  "backToSelect": "Ø¹ÙˆØ¯Ø© Ù„Ù„Ø§Ø®ØªÙŠØ§Ø±",
  "languageSwitch": "English",
  "countries": {
    "Iraq": "Ø§Ù„Ø¹Ø±Ø§Ù‚",
    "Saudi Arabia": "Ø§Ù„Ø³Ø¹ÙˆØ¯ÙŠØ©",
    "Kuwait": "Ø§Ù„ÙƒÙˆÙŠØª",
    "Jordan": "Ø§Ù„Ø£Ø±Ø¯Ù†",
    "Syria": "Ø³ÙˆØ±ÙŠØ§",
    "Turkey": "ØªØ±ÙƒÙŠØ§",
    "Iran": "Ø¥ÙŠØ±Ø§Ù†",
    "Egypt": "Ù…ØµØ±",
    "Lebanon": "Ù„Ø¨Ù†Ø§Ù†",
    "UAE": "Ø§Ù„Ø¥Ù…Ø§Ø±Ø§Øª",
    "Qatar": "Ù‚Ø·Ø±",
    "Oman": "Ø¹ÙÙ…Ø§Ù†",
    "Yemen": "Ø§Ù„ÙŠÙ…Ù†",
    "Armenia": "Ø£Ø±Ù…ÙŠÙ†ÙŠØ§",
    "Azerbaijan": "Ø£Ø°Ø±Ø¨ÙŠØ¬Ø§Ù†",
    "Georgia": "Ø¬ÙˆØ±Ø¬ÙŠØ§",
    "Afghanistan": "Ø£ÙØºØ§Ù†Ø³ØªØ§Ù†",
    "Pakistan": "Ø¨Ø§ÙƒØ³ØªØ§Ù†",
    "India": "Ø§Ù„Ù‡Ù†Ø¯",
    "Turkmenistan": "ØªØ±ÙƒÙ…Ø§Ù†Ø³ØªØ§Ù†",
    "Uzbekistan": "Ø£ÙˆØ²Ø¨ÙƒØ³ØªØ§Ù†",
    "Kazakhstan": "ÙƒØ§Ø²Ø§Ø®Ø³ØªØ§Ù†"
  },
  "cities": {
    "Baghdad": "Ø¨ØºØ¯Ø§Ø¯",
    "Basra": "Ø§Ù„Ø¨ØµØ±Ø©",
    "Nineveh": "Ù†ÙŠÙ†ÙˆÙ‰",
    "Diyala": "Ø¯ÙŠØ§Ù„Ù‰",
    "Salah al-Din": "ØµÙ„Ø§Ø­ Ø§Ù„Ø¯ÙŠÙ†",
    "Kirkuk": "ÙƒØ±ÙƒÙˆÙƒ",
    "Anbar": "Ø§Ù„Ø£Ù†Ø¨Ø§Ø±",
    "Erbil": "Ø£Ø±Ø¨ÙŠÙ„",
    "Sulaymaniyah": "Ø§Ù„Ø³Ù„ÙŠÙ…Ø§Ù†ÙŠØ©",
    "Dohuk": "Ø¯Ù‡ÙˆÙƒ",
    "Maysan": "Ù…ÙŠØ³Ø§Ù†",
    "Dhi Qar": "Ø°ÙŠ Ù‚Ø§Ø±",
    "Wasit": "ÙˆØ§Ø³Ø·",
    "Babil": "Ø¨Ø§Ø¨Ù„",
    "Karbala": "ÙƒØ±Ø¨Ù„Ø§Ø¡",
    "Najaf": "Ø§Ù„Ù†Ø¬Ù",
    "Qadisiyah": "Ø§Ù„Ù‚Ø§Ø¯Ø³ÙŠØ©",
    "Muthanna": "Ø§Ù„Ù…Ø«Ù†Ù‰",
    "Riyadh": "Ø§Ù„Ø±ÙŠØ§Ø¶",
    "Jeddah": "Ø¬Ø¯Ø©",
    "Kuwait City": "Ù…Ø¯ÙŠÙ†Ø© Ø§Ù„ÙƒÙˆÙŠØª",
    "Hawalli": "Ø­ÙˆÙ„ÙŠ",
    "Amman": "Ø¹Ù…Ø§Ù†",
    "Zarqa": "Ø§Ù„Ø²Ø±Ù‚Ø§Ø¡",
    "Damascus": "Ø¯Ù…Ø´Ù‚",
    "Aleppo": "Ø­Ù„Ø¨",
    "Istanbul": "Ø¥Ø³Ø·Ù†Ø¨ÙˆÙ„",
    "Ankara": "Ø£Ù†Ù‚Ø±Ø©",
    "Tehran": "Ø·Ù‡Ø±Ø§Ù†",
    "Mashhad": "Ù…Ø´Ù‡Ø¯",
    "Cairo": "Ø§Ù„Ù‚Ø§Ù‡Ø±Ø©",
    "Alexandria": "Ø§Ù„Ø¥Ø³ÙƒÙ†Ø¯Ø±ÙŠØ©",
    "Beirut": "Ø¨ÙŠØ±ÙˆØª",
    "Tripoli": "Ø·Ø±Ø§Ø¨Ù„Ø³",
    "Dubai": "Ø¯Ø¨ÙŠ",
    "Abu Dhabi": "Ø£Ø¨Ùˆ Ø¸Ø¨ÙŠ",
    "Doha": "Ø§Ù„Ø¯ÙˆØ­Ø©",
    "Al Wakrah": "Ø§Ù„ÙˆÙƒØ±Ø©",
    "Muscat": "Ù…Ø³Ù‚Ø·",
    "Salalah": "ØµÙ„Ø§Ù„Ø©",
    "Sana'a": "ØµÙ†Ø¹Ø§Ø¡",
    "Aden": "Ø¹Ø¯Ù†",
    "Yerevan": "ÙŠØ±ÙŠÙØ§Ù†",
    "Gyumri": "ØºÙŠÙˆÙ…Ø±ÙŠ",
    "Baku": "Ø¨Ø§ÙƒÙˆ",
    "Ganja": "ØºØ§Ù†Ø¬Ø§",
    "Tbilisi": "ØªØ¨Ù„ÙŠØ³ÙŠ",
    "Batumi": "Ø¨Ø§ØªÙˆÙ…ÙŠ",
    "Kabul": "ÙƒØ§Ø¨Ù„",
    "Herat": "Ù‡Ø±Ø§Øª",
    "Islamabad": "Ø¥Ø³Ù„Ø§Ù… Ø¢Ø¨Ø§Ø¯",
    "Karachi": "ÙƒØ±Ø§ØªØ´ÙŠ",
    "New Delhi": "Ù†ÙŠÙˆØ¯Ù„Ù‡ÙŠ",
    "Mumbai": "Ù…ÙˆÙ…Ø¨Ø§ÙŠ",
    "Ashgabat": "Ø¹Ø´Ù‚ Ø¢Ø¨Ø§Ø¯",
    "Mary": "Ù…Ø§Ø±ÙŠ",
    "Tashkent": "Ø·Ø´Ù‚Ù†Ø¯",
    "Samarkand": "Ø³Ù…Ø±Ù‚Ù†Ø¯",
    "Astana": "Ø£Ø³ØªØ§Ù†Ø§",
    "Almaty": "Ø£Ù„Ù…Ø§ØªÙŠ",
    "noFutureData": "No future data available"
  }
}
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\locales\en\translation.json ===
{
  "selectCountry": "Select a Country",
  "selectCity": "Select a City",
  "maxTemp": "Max Temp (Â°C)",
  "minTemp": "Min Temp (Â°C)",
  "avgTemp": "Avg Temp (Â°C)",
  "humidity": "Humidity",
  "wind": "Wind (mph)",
  "precip": "Precipitation (mm)",
  "visibility": "Visibility (km)",
  "uvIndex": "UV Index",
  "season": "Season",
  "date": "Date",
  "predictedTemp": "Predicted Avg Temp",
  "rangeTemp": "Temperature Range",
  "backToSelect": "Back to Selection",
  "languageSwitch": "Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©",
  "countries": {
    "Iraq": "Iraq",
    "Saudi Arabia": "Saudi Arabia",
    "Kuwait": "Kuwait",
    "Jordan": "Jordan",
    "Syria": "Syria",
    "Turkey": "Turkey",
    "Iran": "Iran",
    "Egypt": "Egypt",
    "Lebanon": "Lebanon",
    "UAE": "United Arab Emirates",
    "Qatar": "Qatar",
    "Oman": "Oman",
    "Yemen": "Yemen",
    "Armenia": "Armenia",
    "Azerbaijan": "Azerbaijan",
    "Georgia": "Georgia",
    "Afghanistan": "Afghanistan",
    "Pakistan": "Pakistan",
    "India": "India",
    "Turkmenistan": "Turkmenistan",
    "Uzbekistan": "Uzbekistan",
    "Kazakhstan": "Kazakhstan"
  },
  "cities": {
    "Baghdad": "Baghdad",
    "Basra": "Basra",
    "Nineveh": "Nineveh",
    "Diyala": "Diyala",
    "Salah al-Din": "Salah al-Din",
    "Kirkuk": "Kirkuk",
    "Anbar": "Anbar",
    "Erbil": "Erbil",
    "Sulaymaniyah": "Sulaymaniyah",
    "Dohuk": "Dohuk",
    "Maysan": "Maysan",
    "Dhi Qar": "Dhi Qar",
    "Wasit": "Wasit",
    "Babil": "Babil",
    "Karbala": "Karbala",
    "Najaf": "Najaf",
    "Qadisiyah": "Qadisiyah",
    "Muthanna": "Muthanna",
    "noFutureData": "No future data available"
    
  }
}
=== C:\Users\Yasser Dhia (NDC)\Documents\GitHub\AI-weather-prediction\src\lotties\rain.json ===
